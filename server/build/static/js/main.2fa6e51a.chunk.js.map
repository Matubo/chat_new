{"version":3,"sources":["components/room_carousel/room_carousel.js","components/roomJoinPanel/room_join_panel.js","components/message_container/message_container.js","components/chat_input/chat_input.js","components/authorization/authorization.js","store/reducers/authorization.js","store/reducers/chat_rooms.js","store/reducers/loading.js","store/middleware/root_saga.js","store/store.js","queries/socket.js","queries/queries.js","queries/requests/add_message_to_room.js","queries/requests/set_username.js","queries/requests/create_room.js","queries/requests/join_to_room.js","queries/responses/accept_create_room.js","queries/responses/accept_join_to_room.js","queries/responses/new_messages_on_room.js","queries/responses/accept_set_username.js","components/chat_body/chat_body.js","App.js","reportWebVitals.js","index.js"],"names":["RootCarousel","props","items","changeRoom","crutch","className","loop","margin","DOM","key","id","push","onClick","length","createDOM","RoomJoinPanel","joinToRoom","createRoom","useState","room","setRoom","type","onChange","e","target","value","console","log","MessageField","messages","userId","map","elem","index","username","text","date","ChatInput","sendMessage","message","setMessage","Authorization","setUsername","setUsernameInput","authorized","createSlice","name","initialState","reducers","logIn","state","action","payload","logOut","actions","chatRooms","rooms","currentRoom","addRoom","currentRoomId","setNewMessage","loading","error","errorMessage","startLoading","finishLoading","loadingError","errMsg","test","acceptJoinToRoom","newRoomMessage","acceptSetUsername","rootSaga","currentRooms","store","arr","res","data","status","select","currentRoomState","undefined","put","takeLatest","reducer","authorization","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","serializableCheck","configureStore","run","authorizationActions","loadingActions","chatActions","socket","io","ADD_MESSAGE_TO_ROOM","emit","add_message_to_room","SET_USERNAME","set_username","CREATE_ROOM","create_room","JOIN_TO_ROOM","join_to_room","fun","on","accept_create_room","dispatch","accept_join_to_room","new_room_message","accept_set_username","ChatBody","useSelector","useDispatch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fa6e51a.chunk.js","sourcesContent":["import OwlCarousel from \"react-owl-carousel\";\r\nimport \"owl.carousel/dist/assets/owl.carousel.css\";\r\nimport \"owl.carousel/dist/assets/owl.theme.default.css\";\r\nimport \"./room_carousel.css\";\r\n\r\nfunction RootCarousel(props) {\r\n  const { items, changeRoom } = props;\r\n  let crutch = 0;\r\n\r\n  function createDOM() {\r\n    let DOM = [];\r\n    for (let key in items) {\r\n      const { id } = items[key];\r\n      DOM.push(\r\n        <button\r\n          className=\"owl-theme__items items\"\r\n          key={id}\r\n          onClick={() => {\r\n            changeRoom(id);\r\n          }}\r\n        >\r\n          {id}\r\n        </button>\r\n      );\r\n    }\r\n    crutch = DOM.length;\r\n    return DOM;\r\n  }\r\n\r\n  return (\r\n    <OwlCarousel\r\n      className=\"owl-theme carousel\"\r\n      loop\r\n      margin={10}\r\n      items={10}\r\n      loop={false}\r\n      key={crutch}\r\n      dots={true}\r\n    >\r\n      {createDOM()}\r\n    </OwlCarousel>\r\n  );\r\n}\r\nexport default RootCarousel;\r\n","import { useState } from \"react\";\r\nimport \"./room_join_panel.css\";\r\n\r\nfunction RoomJoinPanel(props) {\r\n  const { joinToRoom, createRoom } = props;\r\n  const [room, setRoom] = useState(0);\r\n  function changeHandler(e) {\r\n    setRoom(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"room-join-panel\">\r\n      <p className=\"room-join-panel__header\">Введите комнату для подключения</p>\r\n      <input\r\n        className=\"room-join-panel__room-input\"\r\n        type=\"number\"\r\n        onChange={changeHandler}\r\n        value={room}\r\n      ></input>\r\n      <button\r\n        className=\"room-join-panel__join-button\"\r\n        onClick={() => {\r\n          console.log(\"join \" + room);\r\n          joinToRoom(room);\r\n        }}\r\n      >\r\n        Присоединиться\r\n      </button>\r\n      <button className=\"room-join-panel__create-room-button\" onClick={createRoom}>Создать новую</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomJoinPanel;\r\n","import \"./message_container.css\";\r\n\r\nfunction MessageField(props) {\r\n  const { messages, userId } = props;\r\n  console.log(messages);\r\n  return (\r\n    <div className=\"message-container\">\r\n      {messages.length ? (\r\n        messages.map((elem, index) => {\r\n          return (\r\n            <div\r\n              className={\r\n                userId == elem.username\r\n                  ? \"message-container_message self-message\"\r\n                  : \"message-container_message\"\r\n              }\r\n              key={index}\r\n            >\r\n              <p className=\"message-container_message_text\">{elem.text}</p>\r\n              <p className=\"message-container_message_info\">\r\n                {elem.username} - {elem.date}\r\n              </p>\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageField;\r\n","import { useState } from \"react\";\r\nimport \"./chat_input.css\";\r\n\r\nfunction ChatInput(props) {\r\n  const {sendMessage}=props;\r\n  const [message, setMessage] = useState(\"\");\r\n  function changeHandler(e) {\r\n    setMessage(e.target.value);\r\n  }\r\n  function sendMessageHandler(){\r\n    if(message.length>0){\r\n    sendMessage(message)\r\n    setMessage('');\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"chat-input\">\r\n      <input\r\n        className=\"chat-input__input\"\r\n        type=\"text\"\r\n        onChange={changeHandler}\r\n        value={message}\r\n      ></input>\r\n      <button className=\"chang-input__send\" onClick={sendMessageHandler}>\r\n        Отправить\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatInput;\r\n","import { useState } from \"react\";\r\nimport \"./authorization.css\";\r\n\r\nfunction Authorization(props) {\r\n  const {setUsername}=props;\r\n  const [username, setUsernameInput] = useState(\"\");\r\n  function changeHandler(e) {\r\n    setUsernameInput(e.target.value);\r\n  }\r\n  function setUsernameHandler(){\r\n    setUsername(username)\r\n  }\r\n\r\n  return (\r\n    <div className=\"authorization-body\">\r\n      <div className=\"authorization-body__pop-up\">\r\n        <p className=\"authorization-body__pop-up-header\">Вход в чат</p>\r\n        <p className=\"authorization-body__pop-up-login\">Введите username</p>\r\n        <input\r\n          className=\"authorization-body__pop-up__username-input\"\r\n          type=\"text\"\r\n          onChange={changeHandler}\r\n          value={username}\r\n        ></input>\r\n        <button className=\"authorization-body__pop-up__authorization-button\" onClick={setUsernameHandler}>\r\n          Войти\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Authorization;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst authorized = createSlice({\r\n  name: \"authorized\",\r\n  initialState: {\r\n    authorized: false,\r\n    userId: null,\r\n  },\r\n  reducers: {\r\n    logIn(state, action) {\r\n      const { username } = action.payload;\r\n      state.authorized = true;\r\n      state.userId = username;\r\n    },\r\n    logOut(state) {\r\n      state.authorized = false;\r\n      state.userId = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport default authorized.reducer;\r\nexport const actions = authorized.actions;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst chatRooms = createSlice({\r\n  name: \"chatRooms\",\r\n  initialState: {\r\n    rooms: {},\r\n    currentRoom: null,\r\n  },\r\n  reducers: {\r\n    addRoom(state, action) {\r\n      console.log(actions);\r\n      const { room, id } = action.payload;\r\n      state.rooms[id] = room;\r\n    },\r\n    changeRoom(state, action) {\r\n      const { id } = action.payload;\r\n      state.currentRoomId = id;\r\n    },\r\n    setNewMessage(state, action) {\r\n      const { id, message } = action.payload;\r\n      state.rooms[id].messages.push(message);\r\n    },\r\n  },\r\n});\r\n\r\nexport default chatRooms.reducer;\r\nexport const actions = chatRooms.actions;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst loading = createSlice({\r\n  name: \"loading\",\r\n  initialState: { loading: false, error: false, errorMessage: null },\r\n  reducers: {\r\n    startLoading(state) {\r\n      state.loading = true;\r\n      state.errorMessage = null;\r\n    },\r\n    finishLoading(state) {\r\n      state.loading = false;\r\n      state.errorMessage = null;\r\n    },\r\n    loadingError(state, action) {\r\n      let { errMsg } = action.payload;\r\n      state.error = true;\r\n      state.errorMessage = errMsg;\r\n    },\r\n  },\r\n});\r\n\r\nexport default loading.reducer;\r\nexport const actions = loading.actions;\r\n","import { takeLatest, put, select } from \"@redux-saga/core/effects\";\r\nimport { actions } from \"../store\";\r\n\r\n/* const {startLoading,finishLoading,logIn,logOut,addRoom,changeRoom} = actions  */\r\nconst currentState = (store) => store;\r\nconst currentRooms = (store) => store.chatRooms;\r\n\r\nfunction* test(...arr) {\r\n  console.log(arr);\r\n}\r\n\r\nfunction* acceptJoinToRoom(res) {\r\n  const { data } = res;\r\n  if (data.status) {\r\n    let currentRoomState = yield select(currentRooms);\r\n    console.log(data.room);\r\n    if (currentRoomState.rooms[`${data.room.id}`] == undefined) {\r\n      yield put(actions.addRoom({ room: data.room, id: data.room.id }));\r\n    }\r\n  }\r\n}\r\n\r\nfunction* newRoomMessage(res) {\r\n  const { data } = res;\r\n  console.log(data);\r\n  if (data.status) {\r\n    yield put(actions.setNewMessage({ id: data.id, message: data.message }));\r\n  }\r\n}\r\n\r\nfunction* acceptSetUsername(res) {\r\n  const { status, username } = res.data;\r\n  if (status) {\r\n    yield put(actions.finishLoading());\r\n    console.log(actions.logIn({ username }));\r\n    yield put(actions.logIn({ username }));\r\n  }\r\n  /*   console.log(data)\r\n  if (data.status) {\r\n    console.log(data);\r\n  }\r\n  */\r\n}\r\n\r\nfunction* rootSaga(action) {\r\n  yield takeLatest(\"queries/accept_create_room\", test);\r\n  yield takeLatest(\"queries/accept_join_to_room\", acceptJoinToRoom);\r\n  yield takeLatest(\"queries/new_room_message\", newRoomMessage);\r\n  yield takeLatest(\"queries/accept_set_username\", acceptSetUsername);\r\n}\r\n\r\nexport default rootSaga;\r\n\r\n/* \r\naccept_create_room(socket)(() => {\r\n    useDispatch({ type: \"accept_create_room_success\" });\r\n  });\r\n  accept_join_to_room(socket)(() => {\r\n    useDispatch({ type: \"accept_join_to_room_success\" });\r\n  });\r\n  new_room_message(socket)(() => {\r\n    useDispatch({ type: \"new_room_message_request\" });\r\n  });\r\n  accept_set_username(socket)(() => {\r\n    useDispatch({ type: \"accept_set_username_success\" });\r\n  }); */\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport authorization, {\r\n  actions as authorizationActions,\r\n} from \"./reducers/authorization\";\r\nimport chatRooms, { actions as chatActions } from \"./reducers/chat_rooms\";\r\nimport loading, { actions as loadingActions } from \"./reducers/loading\";\r\nimport rootSaga from \"./middleware/root_saga\";\r\n\r\nconst reducer = { chatRooms, authorization, loading };\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [\r\n  ...getDefaultMiddleware({ thunk: false, serializableCheck: false }),\r\n  sagaMiddleware,\r\n];\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware,\r\n});\r\nsagaMiddleware.run(rootSaga);\r\n\r\nconst actions = { ...authorizationActions, ...loadingActions, ...chatActions };\r\n\r\nexport { actions };\r\nexport default store","import io from \"socket.io-client\";\r\n\r\nconst socket = io();\r\n\r\nexport default socket;\r\n","import socket from \"./socket\";\r\nimport set_username from \"./requests/set_username\";\r\nimport add_message_to_room from \"./requests/add_message_to_room\";\r\nimport create_room from \"./requests/create_room\";\r\nimport join_to_room from \"./requests/join_to_room\";\r\nimport accept_create_room from \"./responses/accept_create_room\";\r\nimport accept_join_to_room from \"./responses/accept_join_to_room\";\r\nimport new_room_message from \"./responses/new_messages_on_room\";\r\nimport accept_set_username from \"./responses/accept_set_username\";\r\nimport store  from \"../store/store\";\r\n\r\nconst ADD_MESSAGE_TO_ROOM = add_message_to_room(socket);\r\nconst SET_USERNAME = set_username(socket);\r\nconst CREATE_ROOM = create_room(socket);\r\nconst JOIN_TO_ROOM = join_to_room(socket);\r\n\r\naccept_create_room(socket)((data) => {\r\n  store.dispatch({ type: \"queries/accept_create_room\", data });\r\n});\r\naccept_join_to_room(socket)((data) => {\r\n  store.dispatch({ type: \"queries/accept_join_to_room\", data });\r\n});\r\nnew_room_message(socket)((data) => {\r\n  store.dispatch({ type: \"queries/new_room_message\", data });\r\n});\r\naccept_set_username(socket)((data) => {\r\n  store.dispatch({ type: \"queries/accept_set_username\", data });\r\n});\r\n\r\nexport { ADD_MESSAGE_TO_ROOM, SET_USERNAME, CREATE_ROOM, JOIN_TO_ROOM };\r\n","export default function add_message_to_room(socket) {\r\n  return function (id, message) {\r\n    socket.emit(\"add_new_message\", { id, message });\r\n  };\r\n}\r\n","export default function set_username(socket) {\r\n  return function (username) {\r\n    socket.emit(\"set_username\", { username });\r\n  };\r\n}\r\n","export default function create_room(socket) {\r\n  return function () {\r\n    socket.emit(\"create_room\");\r\n  };\r\n}\r\n","export default function join_to_room(socket) {\r\n  return function (id) {\r\n    socket.emit(\"join_to_room\", { id });\r\n  };\r\n}\r\n","export default function accept_create_room(socket) {\r\n  return function (fun) {\r\n    socket.on(\"accept_create_room\", (data) => {\r\n      fun(data);\r\n    });\r\n  };\r\n}\r\n","export default function accept_join_to_room(socket) {\r\n  return function (fun) {\r\n    socket.on(\"accept_join_to_room\", (data) => {\r\n      fun(data);\r\n    });\r\n  };\r\n}\r\n","export default function new_room_message(socket) {\r\n  return function (fun) {\r\n    socket.on(\"new_room_message\", (data) => {\r\n      fun(data);\r\n    });\r\n  };\r\n}\r\n","export default function accept_set_username(socket) {\r\n  return function (fun) {\r\n    socket.on(\"accept_set_username\", (data) => {\r\n      console.log(\"accept_set_username\")\r\n      fun(data);\r\n    });\r\n  };\r\n}\r\n","import RoomCarousel from \"../room_carousel/room_carousel\";\r\nimport RoomJoinPanel from \"../roomJoinPanel/room_join_panel\";\r\nimport MessageContainer from \"../message_container/message_container\";\r\nimport ChatInput from \"../chat_input/chat_input\";\r\nimport Authorization from \"../authorization/authorization\";\r\nimport { actions } from \"../../store/store\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  JOIN_TO_ROOM,\r\n  ADD_MESSAGE_TO_ROOM,\r\n  CREATE_ROOM,\r\n  SET_USERNAME,\r\n} from \"../../queries/queries\";\r\n\r\nimport \"./chat_body.css\";\r\n\r\nfunction ChatBody(props) {\r\n  const chatRooms = useSelector((state) => state.chatRooms);\r\n  const authorization = useSelector((state) => state.authorization);\r\n  const loading = useSelector((state) => state.loading);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"chat-body\">\r\n      <p className=\"chat-body__header\">CHAT</p>\r\n      <div className=\"chat-body__content\">\r\n        {authorization.authorized ? (\r\n          <>\r\n            <RoomCarousel\r\n              items={chatRooms.rooms}\r\n              changeRoom={(id) => dispatch(actions.changeRoom({ id }))}\r\n            ></RoomCarousel>\r\n            <RoomJoinPanel\r\n              joinToRoom={JOIN_TO_ROOM}\r\n              createRoom={CREATE_ROOM}\r\n            ></RoomJoinPanel>\r\n            <MessageContainer\r\n              messages={\r\n                chatRooms.currentRoomId\r\n                  ? chatRooms.rooms[chatRooms.currentRoomId].messages\r\n                  : []\r\n              }\r\n              userId={authorization.userId}\r\n            ></MessageContainer>\r\n            <ChatInput\r\n              sendMessage={(message) => {\r\n                ADD_MESSAGE_TO_ROOM(chatRooms.currentRoomId, message);\r\n              }}\r\n            ></ChatInput>\r\n          </>\r\n        ) : (\r\n          <Authorization setUsername={SET_USERNAME} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBody;\r\n","import \"./App.css\";\r\nimport ChatBody from \"./components/chat_body/chat_body\";\r\nimport store from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Provider store={store}>\r\n        <ChatBody></ChatBody>\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './assets/fonts/stylesheet.css'\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}