{"version":3,"sources":["components/authorization/authorization.js","components/room_carousel/room_carousel.js","store/reducers/chat_rooms.js","store/reducers/authorization.js","store/reducers/loading.js","store/middleware/root_saga.js","store/store.js","queries/socket.js","queries/queries.js","queries/requests/add_message_to_room.js","queries/requests/set_username.js","queries/requests/create_room.js","queries/requests/join_to_room.js","components/test.js","components/roomJoinPanel/room_join_panel.js","components/message_container/message_container.js","components/chat_input/chat_input.js","components/chat_body/chat_body.js","App.js","reportWebVitals.js","index.js"],"names":["Authorization","RootCarousel","props","items","className","loop","margin","length","map","elem","id","initialState","rooms","Map","current_room","authorized","userId","loading","error","error_message","rootSaga","action","reducer","chat_rooms","state","type","set","new_room","new_current_room","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","thunk","serializableCheck","store","configureStore","run","socket","io","ADD_MESSAGE_TO_ROOM","message","emit","add_message_to_room","SET_USERNAME","username","set_username","CREATE_ROOM","create_room","JOIN_TO_ROOM","join_to_room","Test","subscribe","console","log","getState","onClick","dispatch","RoomJoinPanel","useState","room","setRoom","onChange","e","target","value","MessageField","messages","ChatInput","setMessage","RCitems","ChatBody","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5427fde7.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./authorization.css\";\r\n\r\nfunction Authorization(props) {\r\n  const [nickname, setNickname] = useState(\"\");\r\n  function changeHandler(e) {\r\n    setNickname(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"authorization-body\">\r\n      <div className=\"authorization-body__pop-up\">\r\n        <p className=\"authorization-body__pop-up-header\">Вход в чат</p>\r\n        <p className=\"authorization-body__pop-up-login\">Введите nickname</p>\r\n        <input\r\n          className=\"authorization-body__pop-up__nickname-input\"\r\n          type=\"text\"\r\n          onChange={changeHandler}\r\n          value={nickname}\r\n        ></input>\r\n        <button className=\"authorization-body__pop-up__authorization-button\">\r\n          Войти\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Authorization;\r\n","import OwlCarousel from \"react-owl-carousel\";\r\nimport \"owl.carousel/dist/assets/owl.carousel.css\";\r\nimport \"owl.carousel/dist/assets/owl.theme.default.css\";\r\nimport \"./room_carousel.css\";\r\n\r\nfunction RootCarousel(props) {\r\n  const { items } = props;\r\n  return (\r\n    <OwlCarousel className=\"owl-theme\" loop margin={10} items={10}>\r\n      {items.length > 0 ? (\r\n        items.map((elem) => {\r\n          return (\r\n            <div className=\"owl-theme__items items\" key={elem.id}>\r\n              {elem.id}\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </OwlCarousel>\r\n  );\r\n}\r\nexport default RootCarousel;\r\n","const initialState = {\r\n  rooms: new Map(),\r\n  current_room: null,\r\n};\r\n\r\nexport default function chat_rooms(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"ADD_ROOM\":\r\n      return {\r\n        rooms: state.rooms.set(\r\n          action.new_room.id,\r\n          action.new_room\r\n        ) /* [...state.rooms, action.new_room] */,\r\n        current_room: state.current_room,\r\n      };\r\n    case \"CHANGE_ROOM\":\r\n      return { rooms: state.rooms, current_room: action.new_current_room };\r\n    case \"SET_NEW_MESSAGES\":\r\n      return { rooms: action.rooms, current_room: action.current_room };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  authorized: false,\r\n  userId: null,\r\n};\r\n\r\nexport default function authorized(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"LOG_IN\":\r\n      return { authorized: true, userId: action.userId };\r\n    case \"LOG_OUT\":\r\n      return { authorized: false, userId: null };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  loading: false,\r\n  error: false,\r\n  error_message: null,\r\n};\r\n\r\nexport default function loading(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"START_LOADING\":\r\n      return { loading: true, error: false, error_message: null };\r\n    case \"FINISH_LOADING\":\r\n      return { loading: false, error: false, error_message: null };\r\n    case \"ERROR\":\r\n      return {\r\n        loading: false,\r\n        error: true,\r\n        error_message: action.error_message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","function* rootSaga(action) {}\r\n\r\nexport default rootSaga;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport chat_rooms from \"./reducers/chat_rooms\";\r\nimport authorized from \"./reducers/authorization\";\r\nimport loading from \"./reducers/loading\";\r\nimport rootSaga from \"./middleware/root_saga\";\r\n\r\n/* const initialStore = {\r\n  isLoading: false,\r\n  authorized: false,\r\n  currentRoom: null,\r\n  userId: null,\r\n  rooms: [],\r\n}; */\r\n \r\nconst reducer = { chat_rooms, authorized, loading };\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [\r\n  ...getDefaultMiddleware({ thunk: false, serializableCheck: false }),\r\n  sagaMiddleware,\r\n];\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware,\r\n});\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import io from \"socket.io-client\";\r\n\r\nconst socket = io(\"http://localhost:3001\");\r\n\r\nexport default socket;\r\n","import socket from \"./socket\";\r\nimport set_username from \"./requests/set_username\";\r\nimport add_message_to_room from \"./requests/add_message_to_room\";\r\nimport create_room from \"./requests/create_room\";\r\nimport join_to_room from \"./requests/join_to_room\";\r\n\r\nconst ADD_MESSAGE_TO_ROOM = add_message_to_room(socket);\r\nconst SET_USERNAME = set_username(socket);\r\nconst CREATE_ROOM = create_room(socket);\r\nconst JOIN_TO_ROOM = join_to_room(socket);\r\n\r\nexport { ADD_MESSAGE_TO_ROOM, SET_USERNAME, CREATE_ROOM, JOIN_TO_ROOM };\r\n","export default function add_message_to_room(socket) {\r\n  return function (id, message) {\r\n    socket.emit(\"add_new_message\", { id, message });\r\n  };\r\n}\r\n","export default function set_username(socket) {\r\n  return function (username) {\r\n    socket.emit(\"set_username\", { username });\r\n  };\r\n}\r\n","export default function create_room(socket) {\r\n  return function () {\r\n    socket.emit(\"create_room\");\r\n  };\r\n}\r\n","export default function join_to_room(socket) {\r\n  return function (id) {\r\n    socket.emit(\"join_to_room\", { id });\r\n  };\r\n}\r\n","import store from \"../store/store\";\r\nimport {\r\n  ADD_MESSAGE_TO_ROOM,\r\n  SET_USERNAME,\r\n  CREATE_ROOM,\r\n  JOIN_TO_ROOM,\r\n} from \"../queries/queries\";\r\n\r\nexport default function Test() {\r\n  /* const [authorised] = store.getState(); */\r\n  function test() {\r\n    console.log(store.getState());\r\n  }\r\n  store.subscribe(() => {\r\n    console.log(store.getState());\r\n  });\r\n  function load() {\r\n    store.dispatch({ type: \"START_LOADING\" });\r\n  }\r\n  return (\r\n    <>\r\n      <div></div>\r\n      <button onClick={test}>Test</button>\r\n      <button onClick={load}>loading</button>\r\n      <button\r\n        onClick={() => {\r\n          SET_USERNAME(\"Matthew\");\r\n        }}\r\n      >\r\n        username\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          CREATE_ROOM();\r\n        }}\r\n      >\r\n        create\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          JOIN_TO_ROOM(1);\r\n        }}\r\n      >\r\n        join\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          ADD_MESSAGE_TO_ROOM(1, \"Idi naxoi\");\r\n        }}\r\n      >\r\n        send\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport \"./room_join_panel.css\";\r\nimport Test from \"../test\";\r\n\r\nfunction RoomJoinPanel(props) {\r\n  const [room, setRoom] = useState(0);\r\n  function changeHandler(e) {\r\n    setRoom(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"room-join-panel\">\r\n      <p className=\"room-join-panel__header\">Введите комнату для подключения</p>\r\n      <input\r\n        className=\"room-join-panel__room-input\"\r\n        type=\"number\"\r\n        onChange={changeHandler}\r\n        value={room}\r\n      ></input>\r\n      <button className=\"room-join-panel__join-button\" onClick={() => {}}>\r\n        Присоединиться\r\n      </button>\r\n      <Test></Test>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoomJoinPanel;\r\n","function MessageField(props) {\r\n  const { messages } = props;\r\n  return (\r\n    <div className=\"message-container\">\r\n      {messages.length ? (\r\n        messages.map((elem) => {\r\n          return <p className=\"message-container_message\">{elem}</p>;\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageField;\r\n","import { useState } from \"react\";\r\nimport \"./chat_input.css\";\r\n\r\nfunction ChatInput(props) {\r\n  const [message, setMessage] = useState(\"\");\r\n  function changeHandler(e) {\r\n    setMessage(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"chat-input\">\r\n      <input\r\n        className=\"chat-input__input\"\r\n        type=\"text\"\r\n        onChange={changeHandler}\r\n        value={message}\r\n      ></input>\r\n      <button className=\"chang-input__send\" onClick={() => {}}>\r\n        Отправить\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatInput;\r\n","import RoomCarousel from \"../room_carousel/room_carousel\";\r\nimport RoomJoinPanel from \"../roomJoinPanel/room_join_panel\";\r\nimport MessageContainer from \"../message_container/message_container\";\r\nimport ChatInput from \"../chat_input/chat_input\";\r\n\r\nimport \"./chat_body.css\";\r\n\r\nconst RCitems = [\r\n  { id: 1 },\r\n  { id: 2 },\r\n  { id: 3 },\r\n  { id: 4 },\r\n  { id: 5 },\r\n  { id: 6 },\r\n  { id: 7 },\r\n  { id: 8 },\r\n  { id: 9 },\r\n  { id: 10 },\r\n  { id: 11 },\r\n  { id: 12 },\r\n  { id: 13 },\r\n  { id: 14 },\r\n  { id: 15 },\r\n];\r\n\r\nfunction ChatBody(props) {\r\n  return (\r\n    <div className=\"chat-body\">\r\n      <p className=\"chat-body__header\">Chat</p>\r\n      <RoomCarousel items={RCitems}></RoomCarousel>\r\n      <RoomJoinPanel></RoomJoinPanel>\r\n      <MessageContainer messages={[]}></MessageContainer>\r\n      <ChatInput></ChatInput>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBody;\r\n","import \"./App.css\";\r\nimport Authorization from \"./components/authorization/authorization\";\r\nimport ChatBody from \"./components/chat_body/chat_body\";\r\n\r\n//data - messages, rooms; methods- send message, join to room , change room \r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/*  <Authorization /> */}\r\n      <ChatBody></ChatBody>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}